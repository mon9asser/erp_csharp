
             

            OpenFileDialog openFileDialog1 = new OpenFileDialog();
            openFileDialog1.Filter = "Excel Files|*.xls;*.xlsx;*.xlsm";
            string dirPath = Directory.GetCurrentDirectory().ToString() + "\\Trees";

            if (Directory.Exists(dirPath))
            {
                openFileDialog1.InitialDirectory = dirPath;
            }

            if (openFileDialog1.ShowDialog() == DialogResult.OK) {
                Excel.Application oExcel = new Excel.Application();
                Excel.Workbook WB = oExcel.Workbooks.Open(openFileDialog1.FileName);
                string ExcelWorkbookname = WB.Name;

                int worksheetcount = WB.Worksheets.Count;
                Microsoft.Office.Interop.Excel.Application excelApp = new Microsoft.Office.Interop.Excel.Application();
                Microsoft.Office.Interop.Excel.Workbook excelWorkbook = excelApp.Workbooks.Open(openFileDialog1.FileName);
                Microsoft.Office.Interop.Excel._Worksheet excelWorksheet = excelWorkbook.Sheets[1];
                Microsoft.Office.Interop.Excel.Range excelRange = excelWorksheet.UsedRange;
                
                int rowCount = excelRange.Rows.Count;  //get row count of excel data
                int colCount = excelRange.Columns.Count;

                for (int i = 1; i <= rowCount; i++) {

                    for (int x = 1; x <= colCount; x++)
                    {
                        if (!string.IsNullOrEmpty(excelRange.Cells[i, x].Text.ToString()))
                        { 
                            Console.WriteLine(excelRange.Cells[i, x].Value2.ToString());
                        }
                    }

                }



            }



			
 
 Excel.Application oExcel = new Excel.Application();
                Excel.Workbook WB = oExcel.Workbooks.Open(openFileDialog1.FileName);
                string ExcelWorkbookname = WB.Name;
                int worksheetcount = WB.Worksheets.Count;
                Microsoft.Office.Interop.Excel.Application excelApp = new Microsoft.Office.Interop.Excel.Application();
                Microsoft.Office.Interop.Excel.Workbook excelWorkbook = excelApp.Workbooks.Open(openFileDialog1.FileName);
                Microsoft.Office.Interop.Excel._Worksheet excelWorksheet = excelWorkbook.Sheets[1];
                Microsoft.Office.Interop.Excel.Range excelRange = excelWorksheet.UsedRange;
                int rowCount = excelRange.Rows.Count;  //get row count of excel data
                int colCount = excelRange.Columns.Count;
                 
				 
				 
 string columns = "";
                string treeData = "";

                // Extract Columns From Excel  
                for ( int i =1; i <= rowCount; i++ ) {
                    for ( int x=1; x <= colCount; x++ ) { 
                        if (!string.IsNullOrEmpty(excelRange.Cells[i, x].Text.ToString())) {
                            
                            string value = excelRange.Cells[i, x].Value2.ToString();
                            if (i == 1) {
                                columns += value;

                                if (x != colCount) {
                                    columns += "|";
                                }
                            }

                            if (i != 1) {

                                treeData += value;
                                if (x == colCount)
                                {
                                    treeData += "&&";
                                }
                                else {
                                    treeData += "|";
                                }
                            }
                        }
                    }
                }

                string[] cols = this.explode("|", columns);
                string[] rows = this.explode("&&", treeData);
                Console.WriteLine(columns);
                if (cols.Length < 3) {
                    MessageBox.Show("عدد الأعمده المطلوب غير متوافق مع شجرة الحسابات");
                    return;
                }

                UI.SelectTreeCols TreeSelector = new UI.SelectTreeCols(rows, cols);
                TreeSelector.ShowDialog();
            }
			
			
			
OpenFileDialog opnfd = new OpenFileDialog();
            opnfd.Filter = "Image Files (*.jpg;*.jpeg;*.png;.*.gif;)|*.jpg;*.png;*.jpeg;.*.gif";
            if (opnfd.ShowDialog() == DialogResult.OK)
            {
                logoImage_byte.Image = new Bitmap(opnfd.FileName);
                logoImage_byte.ImageLocation = opnfd.FileName;
            }
			
			
			
			
			
			Excel.Application oExcel = new Excel.Application();
            Excel.Workbook WB = oExcel.Workbooks.Open(filepath);
            string ExcelWorkbookname = WB.Name;
            int worksheetcount = WB.Worksheets.Count;
            Microsoft.Office.Interop.Excel.Application excelApp = new Microsoft.Office.Interop.Excel.Application();
            Microsoft.Office.Interop.Excel.Workbook excelWorkbook = excelApp.Workbooks.Open(filepath);
            Microsoft.Office.Interop.Excel._Worksheet excelWorksheet = excelWorkbook.Sheets[1];
            Microsoft.Office.Interop.Excel.Range excelRange = excelWorksheet.UsedRange;
            int rowCount = excelRange.Rows.Count;  //get row count of excel data
            int colCount = excelRange.Columns.Count; // get column count of excel data
             
            for (int i = 1; i <= rowCount; i++)
            {
                if (i != 1) { 
                    // Accounting Tree Data  
                    string accountNo       = excelRange.Cells[i, 1].Value2.ToString();
                    string accountName     = excelRange.Cells[i, 2].Value2.ToString();
                    string accountNameEn   = excelRange.Cells[i, 3].Value2.ToString();
                    string mainAccount     = excelRange.Cells[i, 4].Value2.ToString();
                    string isDebit         = excelRange.Cells[i, 5].Value2.ToString();
                    string balance         = (excelRange.Cells[i, 6].Value2.ToString() == "") ? "0" : excelRange.Cells[i, 6].Value2.ToString();

                    tree.Create_Tree_Account(-1, accountNo, accountName, accountNameEn, mainAccount, isDebit, balance, true );
                } 
            }
             
            // Fill The Tree 
            this.Fill_Accounting_Tree();
			