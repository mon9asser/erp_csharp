
declare @trial_blce AS [dbo].Trial_Balance;

declare @date_from datetime;
set @date_from = '2022-05-31';

declare @date_to datetime;
 set @date_to = '2025-05-05';
  


-- OPENING BALANCE 
insert @trial_blce
select 
	accounts.account_number 'account_number' , 
	accounts.account_name 'account_name',
	COALESCE(s.opening_debit, 0) 'opening_debit',
	COALESCE(s.opening_credit, 0) 'opening_credit', 
	COALESCE(x.debit,0) 'transaction_debit',  
	COALESCE(x.credit,0)  'transaction_credit',
	
	-- CALCULATE ENDING BALANCE   
	(CASE WHEN ((COALESCE(s.opening_debit, 0)+ COALESCE(x.debit,0)) - (COALESCE(s.opening_credit, 0)+ COALESCE(x.credit,0)) > 0) 
		THEN (COALESCE(s.opening_debit, 0)+ COALESCE(x.debit,0)) - (COALESCE(s.opening_credit, 0)+ COALESCE(x.credit,0))
		ELSE 0 END) 'ending_debit', 
	(CASE WHEN ((COALESCE(s.opening_debit, 0)+ COALESCE(x.debit,0)) - (COALESCE(s.opening_credit, 0)+ COALESCE(x.credit,0)) < 0) 
		THEN ABS( (COALESCE(s.opening_debit, 0)+ COALESCE(x.debit,0)) - (COALESCE(s.opening_credit, 0)+ COALESCE(x.credit,0)) )
		ELSE 0 END) 'ending_credit'   
	from accounts
FULL OUTER join (
			SELECT journal_details.account_number,  
			SUM(COALESCE(debit, 0)) 'opening_debit', 
			SUM(COALESCE(credit, 0 )) 'opening_credit' 
			FROM journal_details 
			INNER JOIN journals ON journal_details.journal_id =  journals.id 
			WHERE journal_details.account_number LIKE '%' AND
			journals.updated_date < @date_from
			GROUP BY  journal_details.account_number
) s on s.account_number = accounts.account_number

FULL OUTER JOIN (
	SELECT 
	journal_details.account_number,  
	CAST(accounts.account_name AS VARCHAR(50)) 'name', 
	SUM(COALESCE(debit, 0)) 'debit', 
	SUM(COALESCE(credit, 0 )) 'credit' FROM accounts  
	INNER JOIN journal_details ON journal_details.account_number =  accounts.account_number
	INNER JOIN journals ON journal_details.journal_id =  journals.id 
	WHERE journal_details.account_number LIKE '%' AND
	journals.updated_date BETWEEN @date_from AND @date_to 
	GROUP BY 
		journal_details.account_number, 
		CAST(accounts.account_name AS VARCHAR(50))  
) x ON x.account_number = accounts.account_number WHERE 
	accounts.account_number NOT IN (100,200,300,400,500,110,120) 
	ORDER BY accounts.account_number;

	select 
			*
		from @trial_blce where (ending_debit !=0 and ending_credit =0) OR ( ending_credit!=0 and ending_debit =0);

	select 
			sum(transaction_debit) 'tran_debit', 
			sum(transaction_credit) 'tran_credit',
			sum(ending_debit) 'end_debit',
			ABS(sum(ending_credit )) 'end_credit'
		from @trial_blce where (ending_debit !=0 and ending_credit =0) OR ( ending_credit!=0 and ending_debit =0);